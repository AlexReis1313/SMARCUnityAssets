//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Smarc
{
    [Serializable]
    public class LatLonOdometryMsg : Message
    {
        public const string k_RosMessageName = "smarc_msgs/LatLonOdometry";
        public override string RosMessageName => k_RosMessageName;

        //  This represents an estimate of a position and velocity in free space.  
        public Std.HeaderMsg header;
        public Geographic.GeoPoseMsg lat_lon_pose;
        //  Row-major representation of the 6x6 covariance matrix
        //  The orientation parameters use a fixed-axis representation.
        //  In order, the parameters are:
        //  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
        public double[] covariance;
        public Geometry.TwistWithCovarianceMsg twist;

        public LatLonOdometryMsg()
        {
            this.header = new Std.HeaderMsg();
            this.lat_lon_pose = new Geographic.GeoPoseMsg();
            this.covariance = new double[36];
            this.twist = new Geometry.TwistWithCovarianceMsg();
        }

        public LatLonOdometryMsg(Std.HeaderMsg header, Geographic.GeoPoseMsg lat_lon_pose, double[] covariance, Geometry.TwistWithCovarianceMsg twist)
        {
            this.header = header;
            this.lat_lon_pose = lat_lon_pose;
            this.covariance = covariance;
            this.twist = twist;
        }

        public static LatLonOdometryMsg Deserialize(MessageDeserializer deserializer) => new LatLonOdometryMsg(deserializer);

        private LatLonOdometryMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.lat_lon_pose = Geographic.GeoPoseMsg.Deserialize(deserializer);
            deserializer.Read(out this.covariance, sizeof(double), 36);
            this.twist = Geometry.TwistWithCovarianceMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.lat_lon_pose);
            serializer.Write(this.covariance);
            serializer.Write(this.twist);
        }

        public override string ToString()
        {
            return "LatLonOdometryMsg: " +
            "\nheader: " + header.ToString() +
            "\nlat_lon_pose: " + lat_lon_pose.ToString() +
            "\ncovariance: " + System.String.Join(", ", covariance.ToList()) +
            "\ntwist: " + twist.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
