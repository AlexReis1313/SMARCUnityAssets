//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Sam
{
    [Serializable]
    public class CommandMsg : Message
    {
        public const string k_RosMessageName = "sam_msgs/Command";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  Nested type.
        //  Single actuator command.
        // 
        public byte actuator_id;
        // 
        //  Whether the units are linear or angular depends on the actuator type.
        // 
        public const byte COMMAND_TYPE_UNITLESS = 0; //  [-1, 1]
        public const byte COMMAND_TYPE_POSITION = 1; //  meter or radian
        public const byte COMMAND_TYPE_FORCE = 2; //  Newton or Newton metre
        public const byte COMMAND_TYPE_SPEED = 3; //  meter per second or radian per second
        public byte command_type;
        // 
        //  Value of the above type
        // 
        public float command_value;

        public CommandMsg()
        {
            this.actuator_id = 0;
            this.command_type = 0;
            this.command_value = 0.0f;
        }

        public CommandMsg(byte actuator_id, byte command_type, float command_value)
        {
            this.actuator_id = actuator_id;
            this.command_type = command_type;
            this.command_value = command_value;
        }

        public static CommandMsg Deserialize(MessageDeserializer deserializer) => new CommandMsg(deserializer);

        private CommandMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.actuator_id);
            deserializer.Read(out this.command_type);
            deserializer.Read(out this.command_value);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.actuator_id);
            serializer.Write(this.command_type);
            serializer.Write(this.command_value);
        }

        public override string ToString()
        {
            return "CommandMsg: " +
            "\nactuator_id: " + actuator_id.ToString() +
            "\ncommand_type: " + command_type.ToString() +
            "\ncommand_value: " + command_value.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
