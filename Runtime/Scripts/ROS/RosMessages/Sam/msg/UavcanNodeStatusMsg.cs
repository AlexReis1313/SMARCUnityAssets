//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Sam
{
    [Serializable]
    public class UavcanNodeStatusMsg : Message
    {
        public const string k_RosMessageName = "sam_msgs/UavcanNodeStatus";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  Abstract node status information.
        // 
        //  Any UAVCAN node is required to publish this message periodically.
        // 
        // 
        //  Publication period may vary within these limits.
        //  It is NOT recommended to change it at run time.
        // 
        public const ushort MAX_BROADCASTING_PERIOD_MS = 1000;
        public const ushort MIN_BROADCASTING_PERIOD_MS = 2;
        // 
        //  If a node fails to publish this message in this amount of time, it should be considered offline.
        // 
        public const ushort OFFLINE_TIMEOUT_MS = 3000;
        // 
        //  Uptime counter should never overflow.
        //  Other nodes may detect that a remote node has restarted when this value goes backwards.
        // 
        public uint uptime_sec;
        // 
        //  Abstract node health.
        // 
        public const byte HEALTH_OK = 0; //  The node is functioning properly.
        public const byte HEALTH_WARNING = 1; //  A critical parameter went out of range or the node encountered a minor failure.
        public const byte HEALTH_ERROR = 2; //  The node encountered a major failure.
        public const byte HEALTH_CRITICAL = 3; //  The node suffered a fatal malfunction.
        public byte health;
        // 
        //  Current mode.
        // 
        //  Mode OFFLINE can be actually reported by the node to explicitly inform other network
        //  participants that the sending node is about to shutdown. In this case other nodes will not
        //  have to wait OFFLINE_TIMEOUT_MS before they detect that the node is no longer available.
        // 
        //  Reserved values can be used in future revisions of the specification.
        // 
        public const byte MODE_OPERATIONAL = 0; //  Node is performing its main functions.
        public const byte MODE_INITIALIZATION = 1; //  Node is initializing; this mode is entered immediately after startup.
        public const byte MODE_MAINTENANCE = 2; //  Node is under maintenance.
        public const byte MODE_SOFTWARE_UPDATE = 3; //  Node is in the process of updating its software.
        public const byte MODE_OFFLINE = 7; //  Node is no longer available.
        public byte mode;
        // 
        //  Not used currently, keep zero when publishing, ignore when receiving.
        // 
        public byte sub_mode;
        // 
        //  Optional, vendor-specific node status code, e.g. a fault code or a status bitmask.
        // 
        public ushort vendor_specific_status_code;

        public UavcanNodeStatusMsg()
        {
            this.uptime_sec = 0;
            this.health = 0;
            this.mode = 0;
            this.sub_mode = 0;
            this.vendor_specific_status_code = 0;
        }

        public UavcanNodeStatusMsg(uint uptime_sec, byte health, byte mode, byte sub_mode, ushort vendor_specific_status_code)
        {
            this.uptime_sec = uptime_sec;
            this.health = health;
            this.mode = mode;
            this.sub_mode = sub_mode;
            this.vendor_specific_status_code = vendor_specific_status_code;
        }

        public static UavcanNodeStatusMsg Deserialize(MessageDeserializer deserializer) => new UavcanNodeStatusMsg(deserializer);

        private UavcanNodeStatusMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.uptime_sec);
            deserializer.Read(out this.health);
            deserializer.Read(out this.mode);
            deserializer.Read(out this.sub_mode);
            deserializer.Read(out this.vendor_specific_status_code);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.uptime_sec);
            serializer.Write(this.health);
            serializer.Write(this.mode);
            serializer.Write(this.sub_mode);
            serializer.Write(this.vendor_specific_status_code);
        }

        public override string ToString()
        {
            return "UavcanNodeStatusMsg: " +
            "\nuptime_sec: " + uptime_sec.ToString() +
            "\nhealth: " + health.ToString() +
            "\nmode: " + mode.ToString() +
            "\nsub_mode: " + sub_mode.ToString() +
            "\nvendor_specific_status_code: " + vendor_specific_status_code.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
